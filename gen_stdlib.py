r"""Generate the Python modules."""
import argparse
import tomlkit

newline = "\n"
dtypes = ("dp",)

def get_year(fpath: str)->str:
    return fpath.split("/")[-1].split("_")[1].split(".")[0]

def write_module_start(f, name):

    f.write(f"module {name:s}"+newline)
    f.write("    !! Codata Constants - Autogenerated"+newline)
    f.write("    use stdlib_kinds, only: dp, int32"+newline)
    f.write("    use stdlib_codata_type"+newline)
    f.write("    private"+newline)
    f.write(newline)

def write_year(f, year):
    f.write(f"integer(int32), parameter, public :: YEAR = {year:s} !! Year of release."+newline)
    f.write(newline)

def write_constant(f, var, name, value, uncertainty, unit):

    for t in dtypes:
        if t == "qp":
            value.replace("d", "q")
            uncertainty.replace("d", "q")
        if len(dtypes) <= 1:
            suffix = f""
        else:
            suffix = f"_{t:s}"
        f.write(f"type(codata_constant"+suffix+"), parameter, public :: "+\
                f"{var}"+suffix+" = &"+newline +\
                f"codata_constant"+suffix+f"(\"{name:s}\", &"+newline+\
                f"{value:s}_{t:s}, {uncertainty:s}_{t:s}, &"+newline+\
                f"\"{unit:s}\") !! {name:s}"+newline)
    f.write(newline)

def write_module_end(f, name):
    f.write(f"end module {name:s}")


def run(fpath_ast: str, fpath_code: str)->None:

    fast = open(fpath_ast, "r")
    fcode = open(fpath_code, "w")
    year = get_year(fpath_ast)

    write_module_start(fcode, name="stdlib_codata")
    write_year(fcode, year)

    ast = tomlkit.load(fast)
    for var in ast.keys():
        name = ast[var]["name"]
        value = ast[var]["value"]
        uncertainty = ast[var]["uncertainty"]
        unit = ast[var]["unit"]

        write_constant(fcode, var, name, value, uncertainty, unit)
    
    write_module_end(fcode, name="stdlib_codata")

    fast.close()
    fcode.close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog='gencode', description='Generate source code.')
    parser.add_argument("ast", help="File path to the Toml file for ast input.")
    parser.add_argument("code", help="File path to the source file for output.")
    args = parser.parse_args() 

    run(args.ast, args.code)
