name: macos

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]
  release:
    types: [published]
  
  env:
    HOMEBREW_NO_ANALYTICS: "ON" # Make Homebrew installation a little quicker
    HOMEBREW_NO_AUTO_UPDATE: "ON"
    HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK: "ON"
    HOMEBREW_NO_GITHUB_API: "ON"
    HOMEBREW_NO_INSTALL_CLEANUP: "ON"

jobs:
  macos: 
    runs-on: macos-14
    steps:
    - name: Setup Fortran compiler
      uses: fortran-lang/setup-fortran@v1.6.2
      id: setup-fortran
      with:
        compiler: gcc 
        version: 11 
    - name: Set FPM
      uses: fortran-lang/setup-fpm@v7
      with: 
        fpm-version: "v0.12.0"
    - name: MacOS patch libgfortran
      if: contains(matrix.os, 'macos')
      run: |
        which gfortran
        BREW_PREFIX=$(brew --prefix)

        # Query the actual library paths that fpm expects
        echo "Checking library dependencies of fpm bootstrap binary..."
        otool -L $(which fpm)

        # Extract the gcc version from the bootstrap binary's library paths
        BOOTSTRAP_GCC_VERSION=$(otool -L $(which fpm) | grep -o 'gcc@[0-9]\+' | head -n 1 | cut -d@ -f2)
        if [ -z "$BOOTSTRAP_GCC_VERSION" ]; then
          # Try alternative pattern: /lib/gcc/13/ -> extract 13
          BOOTSTRAP_GCC_VERSION=$(otool -L $(which fpm) | grep libgfortran | grep -o '/lib/gcc/[0-9]\+/' | grep -o '[0-9]\+' | head -n 1)
        fi

        echo "Bootstrap fpm built with gcc@$BOOTSTRAP_GCC_VERSION"
        echo "Current toolchain: gcc@${{ matrix.toolchain.version }}"

        if [ "$BOOTSTRAP_GCC_VERSION" == "${{ matrix.toolchain.version }}" ]; then
          echo "âœ“ Bootstrap gcc version matches current toolchain - no patching needed"
          exit 0
        fi    
    - name: Gfortran version
      run : gfortran --version
    - uses: actions/setup-python@v6
      with:
        python-version: |
          3.10
          3.11
          3.12
          3.13
          3.14t
          3.14
    - name: Update python packages 
      run: |
        python3.10 -m pip install -U --user pip setuptools wheel build
        python3.11 -m pip install -U --user pip setuptools wheel build
        python3.12 -m pip install -U --user pip setuptools wheel build
        python3.13 -m pip install -U --user pip setuptools wheel build
        python3.14t -m pip install -U --user pip setuptools wheel build
        python3.14 -m pip install -U --user pip setuptools wheel build
    - name: Checkout
      uses: actions/checkout@v4
    - name: Configure
      run: |
        . ./configure.sh
        echo "FPM_NAME=$FPM_NAME" >> $GITHUB_ENV
        echo "FPM_PYNAME=$FPM_PYNAME" >> $GITHUB_ENV
        echo "FPM_VERSION=$FPM_VERSION" >> $GITHUB_ENV
        echo "FPM_PLATFORM=$FPM_PLATFORM" >> $GITHUB_ENV
        echo "FPM_ARCH=$FPM_ARCH" >> $GITHUB_ENV
    - name: Compile
      run: |
        chmod u+x build.sh
        ./build.sh
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.FPM_NAME }}-${{ env.FPM_PLATFORM }}-${{ env.FPM_ARCH }}-${{ env.FPM_VERSION }}
        path: ./build/install/
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.FPM_PYNAME }}-${{ env.FPM_PLATFORM }}-${{ env.FPM_ARCH }}-${{ env.FPM_VERSION }}
        path: ./py/dist/*.whl
    - name: Release libs
      if: ${{ github.event_name == 'release' }}
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./build/*.zip
        file_glob: true
        tag: ${{ github.ref }}
        overwrite: true
    - name: Release pywrapper
      if: ${{ github.event_name == 'release' }}
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./py/dist/*.zip
        file_glob: true
        tag: ${{ github.ref }}
        overwrite: true
