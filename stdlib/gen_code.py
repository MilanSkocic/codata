r"""Generate the Python modules."""
import argparse
import tomlkit

year = "2022"
newline = "\n"

def write_module_start(f):
    f.write("module stdlib_codata"+newline)
    f.write("    !! Codata Constants - Autogenerated"+newline)
    f.write("    use stdlib_kinds, only: dp, int32"+newline)
    f.write("    use stdlib_codata_type"+newline)
    f.write("    private"+newline)
    f.write(newline)

def write_types(f):
        f.write(f"type, public :: codata_constant_type" + suffix +newline)
        f.write("!! Derived type for representing a Codata constant."+newline)
        f.write("    character(len=64) :: name"+newline)
        f.write(f"    real(dp) :: value"+newline)
        f.write(f"    real(dp) :: uncertainty"+newline)
        f.write("    character(len=32) :: unit"+newline)
        f.write("end type"+newline)
        f.write(newline)

def write_year(f, year):
    f.write(f"integer(int32), parameter, public :: YEAR = {year:s} !! Year of release."+newline)
    f.write(newline)

def write_constant(f, var, name, value, uncertainty, unit):
    f.write(f"type(codata_constant_type), parameter, public :: "+\
                f"{var} = &"+newline +\
                f"codata_constant_type(\"{name:s}\", &"+newline+\
                f"{value:s}_dp, {uncertainty:s}_dp, &"+newline+\
                f"\"{unit:s}\") !! {name:s}"+newline)
    f.write(newline)

def write_module_end(f):
    f.write("end module stdlib_codata")


def run(fpath_ast: str, fpath_code: str)->None:
    fast = open(fpath_ast, "r")
    fcode = open(fpath_code, "w")

    write_module_start(fcode)
    # write_types(fcode)
    write_year(fcode, year)

    ast = tomlkit.load(fast)
    for var in ast.keys():
        name = ast[var]["name"]
        value = ast[var]["value"]
        uncertainty = ast[var]["uncertainty"]
        unit = ast[var]["unit"]

        write_constant(fcode, var, name, value, uncertainty, unit)
    
    write_module_end(fcode)

    fast.close()
    fcode.close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog='gencode', description='Generate source code.')
    parser.add_argument("ast", help="File path to the Toml file for ast input.")
    parser.add_argument("code", help="File path to the source file for output.")
    args = parser.parse_args() 

    run(args.ast, args.code)
