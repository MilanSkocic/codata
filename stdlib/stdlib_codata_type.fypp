#:include "common.fypp"
#:set KINDS = REAL_KINDS
#:set PROPS = ("value", "uncertainty")
module stdlib_codata_type
    !! Codata constant type
    use stdlib_kinds, only: #{for k in KINDS[:-1]}#${k}$, #{endfor}#${KINDS[-1]}$
    use stdlib_io, only: FMT_REAL_DP
    private

    type, public :: codata_constant
    !! Derived type for representing a Codata constant.
        character(len=64) :: name
        real(dp) :: value
        real(dp) :: uncertainty
        character(len=32) :: unit
    contains 
        procedure :: print
        #:for p in PROPS
        #:for k in KINDS
        procedure :: eval_${p}$_${k}$
        #:endfor
        #:endfor
        #:for p in PROPS
        generic :: eval_${p}$ => #{for k in KINDS[:-1]}#eval_${p}$_${k}$, #{endfor}#eval_${p}$_${KINDS[-1]}$
        #:endfor
    end type
    
contains

subroutine print(self)
    !! Print out the constant's name, value, uncertainty and unit.
    class(codata_constant), intent(in) :: self
    print "(A64, SP, "//FMT_REAL_DP//" A5, "//FMT_REAL_DP//", X, A32)", self%name, self%value, "+/-", self%uncertainty, self%unit 
end subroutine

#:for p in PROPS
#:for k in KINDS
elemental real(${k}$) function eval_${p}$_${k}$(self, mold) result(r)
    !! Evaluate the constant ${p}$ for the kind ${k}$
    class(codata_constant), intent(in) :: self
    real(${k}$), intent(in) :: mold
    r = real(self%${p}$, kind(mold))
end function
#:endfor
#:endfor

end module stdlib_codata_type
