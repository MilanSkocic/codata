r"""Generate sources for Fortran."""
import argparse
import tomlkit

newline = "\n"
latest_year = "2022"
cname_len = 65
cunit_len = 33

def get_year(fpath: str)->str:
    return fpath.split("/")[-1].split("_")[1].split(".")[0]

def get_suffix(year):
    if year == latest_year:
        suffix = ""
    else:
        suffix = "_" + year

    return suffix

def write_module_start(f, year):
    suffix = "_" + year
    f.write("module codata__constants" + suffix + newline)
    f.write("    !! Codata Constants - Autogenerated"+newline)
    f.write("    use stdlib_kinds, only: dp, int32"+newline)
    f.write("    use codata__constants_type" + newline)
    f.write("    private"+newline)
    f.write(newline)

def write_year(f, year):
    suffix = get_suffix(year)
    f.write(f"integer(int32), parameter, public :: YEAR{suffix:s} = {year:s} !! Year of release." + newline)
    f.write(newline)

def write_constant(f, var, name, value, uncertainty, unit, year, count):
    suffix = get_suffix(year)
    
    f.write(f"type(codata_constant_type), parameter, public :: "+\
                f"{var}{suffix} = &" + newline +\
                f"codata_constant_type(\"{name:s}\", &" + newline+\
                f"{value:s}_dp, {uncertainty:s}_dp, &" + newline+\
                f"\"{unit:s}\") !! {name:s}" + newline)
    
    f.write(newline)

def write_module_end(f, year):
    suffix = "_" + year 
    f.write("end module codata__constants" + suffix)


def run(fpath_ast: str, fpath_code: str)->None:
    
    year = get_year(fpath_ast)
    
    fcode = open(fpath_code, "w")
    fast = open(fpath_ast, "r")

    write_module_start(fcode, year)
    write_year(fcode, year)

    ast = tomlkit.load(fast)
    for i, var in enumerate(ast.keys()):
        name = ast[var]["name"]
        value = ast[var]["value"]
        uncertainty = ast[var]["uncertainty"]
        unit = ast[var]["unit"]
        
        write_constant(fcode, var, name, value, uncertainty, unit, year, i)
    
    write_module_end(fcode, year)

    fast.close()
    fcode.close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog='gensrc', description='Generate source code.')
    parser.add_argument("ast", help="File path to the Toml file for ast input.")
    parser.add_argument("code", help="File path to the source file for output.")
    args = parser.parse_args() 

    run(args.ast, args.code)
